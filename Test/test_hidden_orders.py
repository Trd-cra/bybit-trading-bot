import unittest
from unittest.mock import patch, MagicMock
import bybit_spot_analysis

class TestHiddenOrders(unittest.TestCase):

    @patch("bybit_spot_analysis.create_hidden_order")
    def test_hidden_limit_order(self, mock_create_hidden_order):
        """üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∫—Ä—ã—Ç–æ–≥–æ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        test_signal = {
            "BTCUSDT": {
                "price": 47000,
                "qty": 0.5,
                "hidden": True,  # –°–∫—Ä—ã—Ç—ã–π –æ—Ä–¥–µ—Ä
            }
        }

        bybit_spot_analysis.handle_hidden_order(test_signal)

        mock_create_hidden_order.assert_called_once_with("BTCUSDT", "Buy", 47000, 0.5)

    @patch("bybit_spot_analysis.create_iceberg_order")
    def test_iceberg_order(self, mock_create_iceberg_order):
        """‚ùÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Iceberg-–æ—Ä–¥–µ—Ä–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞)"""
        test_signal = {
            "BTCUSDT": {
                "price": 47000,
                "qty": 5,  # –ö—Ä—É–ø–Ω—ã–π –æ–±—ä–µ–º
                "iceberg": True,  # Iceberg-—Ä–µ–∂–∏–º
                "visible_qty": 1  # –í–∏–¥–∏–º–∞—è —á–∞—Å—Ç—å 1 BTC
            }
        }

        bybit_spot_analysis.handle_hidden_order(test_signal)

        mock_create_iceberg_order.assert_called_once_with("BTCUSDT", "Buy", 47000, 5, 1)

if __name__ == "__main__":
    unittest.main()
