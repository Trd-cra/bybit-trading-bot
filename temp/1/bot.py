import os
import time
import threading
import signal
from dotenv import load_dotenv
from pybit.unified_trading import HTTP, WebSocket
import pandas as pd
from trade_logic import trade_logic
from utils import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger("bot.log")

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
load_dotenv()
API_KEY = os.getenv("BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET")

if not API_KEY or not API_SECRET:
    logger.error("API_KEY –∏–ª–∏ API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("API_KEY –∏–ª–∏ API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = threading.Event()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API (Testnet)
session = HTTP(testnet=True, api_key=API_KEY, api_secret=API_SECRET)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∏—Å—Å–∏–∏
try:
    fee_response = session.get_fee_rates(category="linear", symbol="BTCUSDT")
    fee_rate = fee_response['result']['list'][0]['takerFeeRate']
    logger.info(f"–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è taker: {fee_rate}")
except (KeyError, IndexError, TypeError) as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: {e}")
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∏—Å—Å–∏—é.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–∞–Ω–µ–µ
df_historical = pd.read_csv('historical_data.csv')
df_historical = trade_logic(df_historical)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
new_rows = []
lock = threading.Lock()

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def handle_message(msg):
    global df_historical, new_rows
    try:
        if "data" in msg:
            price = float(msg["data"]["lastPrice"])
            volume = float(msg["data"]["volume24h"])
            timestamp = pd.Timestamp.now()

            with lock:
                new_rows.append({"timestamp": timestamp, "close": price, "volume": volume})

                if len(new_rows) >= 10:  # batch-–æ–±—Ä–∞–±–æ—Ç–∫–∞
                    df_historical = pd.concat([df_historical, pd.DataFrame(new_rows)], ignore_index=True)
                    df_historical = df_historical.iloc[-250:]
                    df_historical = trade_logic(df_historical)
                    new_rows.clear()

                    signal_trade = df_historical['signal'].iloc[-1]

                    qty = 0.001
                    try:
                        if signal_trade == "LONG":
                            session.place_order(category="linear", symbol="BTCUSDT", side="Buy", orderType="Market", qty=qty)
                            logger.info(f"–û—Ç–∫—Ä—ã—Ç LONG –Ω–∞ {qty} BTC: EMA, RSI, MACD, Bollinger - —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã.")
                        elif signal_trade == "SHORT":
                            session.place_order(category="linear", symbol="BTCUSDT", side="Sell", orderType="Market", qty=qty)
                            logger.info(f"–û—Ç–∫—Ä—ã—Ç SHORT –Ω–∞ {qty} BTC: EMA, RSI, MACD, Bollinger - —É—Å–ª–æ–≤–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã.")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# WebSocket —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
def start_ws():
    while not shutdown_event.is_set():
        ws = None
        try:
            logger.info("–ó–∞–ø—É—Å–∫ WebSocket...")
            ws = WebSocket(channel_type="linear", api_key=API_KEY, api_secret=API_SECRET, testnet=True)
            ws.ticker_stream(symbol="BTCUSDT", callback=handle_message)

            while not shutdown_event.is_set():
                shutdown_event.wait(1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
            shutdown_event.wait(5)
        finally:
            if ws:
                try:
                    ws.close()
                    logger.info("WebSocket –∑–∞–∫—Ä—ã—Ç.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
def shutdown_handler(signum, frame):
    logger.info("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    shutdown_event.set()

# –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)

    ws_thread = threading.Thread(target=start_ws, daemon=True)
    ws_thread.start()

    try:
        while not shutdown_event.is_set():
            shutdown_event.wait(1)
    finally:
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
