import requests
import pandas as pd
import time
import logging

# üîπ –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("fetch_data.log"),
        logging.StreamHandler()
    ]
)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def fetch_historical_data():
    logging.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

    symbol = "BTCUSDT"
    interval = "60"  # 1 —á–∞—Å
    start_timestamp = int(time.mktime(time.strptime('2022-03-20', '%Y-%m-%d'))) * 1000
    end_timestamp = int(time.time()) * 1000
    url = "https://api.bybit.com/v5/market/kline"

    all_data = []

    while start_timestamp < end_timestamp:
        params = {
            "category": "linear",
            "symbol": symbol,
            "interval": interval,
            "start": start_timestamp,
            "end": end_timestamp,
            "limit": 1000
        }

        response = requests.get(url, params=params).json()

        if response["retCode"] == 0:
            data = response["result"]["list"]
            if not data:
                logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                break

            all_data.extend(data)
            last_timestamp = int(data[-1][0])

            if last_timestamp <= start_timestamp:
                logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Å–≤–µ—á–∞. –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞.")
                break

            logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: {pd.to_datetime(last_timestamp, unit='ms')}")

            # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ
            start_timestamp = last_timestamp + (int(interval) * 60 * 1000)

            # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            time.sleep(0.5)
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞: {response['retMsg']}")
            break

    if all_data:
        df = pd.DataFrame(all_data, columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
        df["timestamp"] = pd.to_datetime(df["timestamp"].astype(int), unit='ms')
        df.sort_values(by="timestamp", inplace=True)
        df.drop_duplicates(subset=['timestamp'], inplace=True)
        df.to_csv("historical_data.csv", index=False)
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ historical_data.csv ({len(df)} —Å–≤–µ—á–µ–π)")
    else:
        logging.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# üîπ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
if __name__ == "__main__":
    fetch_historical_data()
