# bot.py
import os
import time
import threading
import signal
from dotenv import load_dotenv
from pybit.unified_trading import HTTP, WebSocket
import pandas as pd

from trade_logic import trade_logic
from utils import setup_logger
from fetch_bybit_data import fetch_historical_data
from whitelist import auto_whitelist_updater, load_whitelist
from orders import load_open_orders, save_open_orders, log_closed_trade

logger = setup_logger("logs/bot.log", console_output=True)

load_dotenv()
API_KEY = os.getenv("BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET")

if not API_KEY or not API_SECRET:
    logger.error("‚ùå API_KEY –∏–ª–∏ API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    raise ValueError("‚ùå API_KEY –∏ API_SECRET –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")

shutdown_event = threading.Event()

try:
    session = HTTP(testnet=True, api_key=API_KEY, api_secret=API_SECRET)
    logger.info("‚úÖ HTTP-—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP-—Å–µ—Å—Å–∏–∏: {e}")
    raise

try:
    fee_response = session.get_fee_rates(category="spot", symbol="BTCUSDT")
    fee_rate = float(fee_response['result']['list'][0]['takerFeeRate'])
    logger.info(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è taker: {fee_rate}")
except Exception as e:
    fee_rate = 0.001
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é: {e}")

def get_symbols():
    return list(load_whitelist().get("SPOT", {}).keys())

# auto_whitelist_updater(get_symbols_func=get_symbols, shutdown_event=shutdown_event)

symbol_dataframes = {}
open_orders = load_open_orders()
ws_threads = []

def handle_message(symbol):
    def inner(msg):
        if "data" not in msg:
            return
        try:
            price = float(msg["data"]["lastPrice"])
            volume = float(msg["data"]["volume24h"])
            timestamp = pd.Timestamp.now()

            df = symbol_dataframes.get(symbol, pd.DataFrame(columns=["timestamp", "close", "volume"]))
            new_row = pd.DataFrame({"timestamp": [timestamp], "close": [price], "volume": [volume]})
            df = pd.concat([df, new_row], ignore_index=True).iloc[-250:]
            df = trade_logic(df)
            symbol_dataframes[symbol] = df

            signal_now = df['signal'].iloc[-1]
            logger.info(f"üîÅ [{symbol}] ‚û§ –¶–µ–Ω–∞: {price:.2f} | –û–±—ä—ë–º: {volume:.2f} | –°–∏–≥–Ω–∞–ª: {signal_now}")

            qty = 10
            if signal_now == "LONG":
                if symbol not in open_orders:
                    session.place_order(category="spot", symbol=symbol, side="Buy", orderType="Market", qty=qty)
                    open_orders[symbol] = {"side": "Buy", "entry_price": price, "qty": qty}
                    save_open_orders(open_orders)
                    logger.info(f"üöÄ [{symbol}] LONG –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {qty}")
            elif signal_now == "SHORT":
                if symbol in open_orders and open_orders[symbol]["side"] == "Buy":
                    entry_price = open_orders[symbol]["entry_price"]
                    qty = open_orders[symbol]["qty"]
                    session.place_order(category="spot", symbol=symbol, side="Sell", orderType="Market", qty=qty)

                    pnl = (price - entry_price) * qty - (price + entry_price) * qty * fee_rate
                    log_closed_trade(symbol, entry_price, price, qty, pnl)
                    logger.info(f"üìâ [{symbol}] SHORT –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {qty} | PnL: {pnl:.2f}")
                    del open_orders[symbol]
                    save_open_orders(open_orders)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
    return inner

def start_ws_for_symbol(symbol):
    try:
        logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –¥–ª—è {symbol}...")
        ws = WebSocket(testnet=True, api_key=API_KEY, api_secret=API_SECRET, channel_type="spot")
        ws.ticker_stream(symbol=symbol, callback=handle_message(symbol))
        while not shutdown_event.is_set():
            time.sleep(1)
    except Exception as e:
        logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")

def shutdown_handler(signum, frame):
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    shutdown_event.set()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)

    logger.info("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    whitelist = get_symbols()
    if not whitelist:
        logger.warning("‚ö†Ô∏è –í–∞–π—Ç–ª–∏—Å—Ç –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å whitelist.json")
    else:
        logger.info(f"‚úÖ –í–∞–π—Ç–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(whitelist)} –ø–∞—Ä.")

    for symbol in whitelist:
        t = threading.Thread(target=start_ws_for_symbol, args=(symbol,), daemon=True)
        ws_threads.append(t)
        t.start()

    while not shutdown_event.is_set():
        time.sleep(1)
