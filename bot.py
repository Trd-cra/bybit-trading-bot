import os
import time
import threading
import signal
from dotenv import load_dotenv
from pybit.unified_trading import HTTP, WebSocket
import pandas as pd
from trade_logic import trade_logic
from utils import setup_logger
from fetch_bybit_data import fetch_historical_data  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger("bot.log", console_output=True)

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
load_dotenv()
API_KEY = os.getenv("BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET")

if not API_KEY or not API_SECRET:
    logger.error("‚ùå API_KEY –∏–ª–∏ API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    raise ValueError("API_KEY –∏ API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")

logger.info("‚úÖ API-–∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# üîπ –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
shutdown_event = threading.Event()

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API (Testnet)
try:
    session = HTTP(testnet=True, api_key=API_KEY, api_secret=API_SECRET)
    logger.info("‚úÖ HTTP-—Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP-—Å–µ—Å—Å–∏–∏: {e}")
    raise

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∏—Å—Å–∏–∏
try:
    fee_response = session.get_fee_rates(category="linear", symbol="BTCUSDT")
    fee_rate = fee_response['result']['list'][0]['takerFeeRate']
    logger.info(f"‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è taker: {fee_rate}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: {e}")
    fee_rate = None

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
if not os.path.exists('historical_data.csv'):
    logger.warning("‚ö†Ô∏è –§–∞–π–ª historical_data.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
    fetch_historical_data()  # üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
try:
    df_historical = pd.read_csv('historical_data.csv')
    df_historical = trade_logic(df_historical)
    logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    df_historical = pd.DataFrame(columns=["timestamp", "close", "volume"])

# üîπ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def handle_message(msg):
    global df_historical
    try:
        if "data" in msg:
            price = float(msg["data"]["lastPrice"])
            volume = float(msg["data"]["volume24h"])
            timestamp = pd.Timestamp.now()

            logger.info("üì• –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.")

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
            new_row = pd.DataFrame({"timestamp": [timestamp], "close": [price], "volume": [volume]})

            # üî• **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ**: –ò—Å–ø–æ–ª—å–∑—É–µ–º `pd.concat()` –≤–º–µ—Å—Ç–æ `df.append()`
            df_historical = pd.concat([df_historical, new_row], ignore_index=True)

            # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏)
            df_historical = df_historical.iloc[-250:]

            # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            df_historical = trade_logic(df_historical)
            signal_trade = df_historical['signal'].iloc[-1]

            # ‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            qty = 0.001
            if signal_trade == "LONG":
                session.place_order(category="linear", symbol="BTCUSDT", side="Buy", orderType="Market", qty=qty)
                logger.info(f"üöÄ –û—Ç–∫—Ä—ã—Ç LONG –Ω–∞ {qty} BTC (—É—Å–ª–æ–≤–∏—è EMA, RSI, MACD, Bollinger –≤—ã–ø–æ–ª–Ω–µ–Ω—ã).")
            elif signal_trade == "SHORT":
                session.place_order(category="linear", symbol="BTCUSDT", side="Sell", orderType="Market", qty=qty)
                logger.info(f"üìâ –û—Ç–∫—Ä—ã—Ç SHORT –Ω–∞ {qty} BTC (—É—Å–ª–æ–≤–∏—è EMA, RSI, MACD, Bollinger –≤—ã–ø–æ–ª–Ω–µ–Ω—ã).")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# üîπ WebSocket —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
def start_ws():
    ws = None
    while not shutdown_event.is_set():
        try:
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket...")
            ws = WebSocket(channel_type="linear", api_key=API_KEY, api_secret=API_SECRET, testnet=True)
            ws.ticker_stream(symbol="BTCUSDT", callback=handle_message)
            logger.info("‚úÖ WebSocket —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

            while not shutdown_event.is_set():
                shutdown_event.wait(1)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            shutdown_event.wait(5)
        finally:
            if ws:
                try:
                    ws.close()
                    logger.info("üõë WebSocket –∑–∞–∫—Ä—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def shutdown_handler(signum, frame):
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    shutdown_event.set()

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)

    ws_thread = threading.Thread(target=start_ws, daemon=True)
    ws_thread.start()

    try:
        while not shutdown_event.is_set():
            shutdown_event.wait(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {e}")
    finally:
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
